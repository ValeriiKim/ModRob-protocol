// Главная тестовая прошивка для отладки различной периферии

// #include "stdio.h"
// Библиотеки микроконтроллера
#include "board_config.h"
#include "usart_dma_config.h"

// Библиотеки CanFestival
#include "canfestival.h"
#include "can_stm32.h"
#include "TestMaster.h"
#include "can_config.h"
#include "modrob_can.hpp"

// Различные вспомогательные библиотеки
// #include "lwrb.h"

#define GREEN_LED_ON    SET_BIT(GPIOC->BSRR, GPIO_BSRR_BR13);
#define GREEN_LED_OFF   SET_BIT(GPIOC->BSRR, GPIO_BSRR_BS13);
#define TESTPIN_ON      SET_BIT(GPIOA->BSRR, GPIO_BSRR_BR9);
#define TESTPIN_OFF     SET_BIT(GPIOA->BSRR, GPIO_BSRR_BS9);

#define STANDARD_FORMAT  0
#define EXTENDED_FORMAT  1

#define DATA_FRAME       0
#define REMOTE_FRAME     1

uint8_t can_rx_ready = 0;

enum class CanTestMode: uint8_t
{
	SilentMode = 0,
	LoopBackMode = 1,
	LoopBackSilentMode = 2
};

struct CAN_Message
    {
        unsigned int id;
        unsigned char data[8];
        unsigned char len;
        unsigned char format;
        unsigned char type;
    };

/** Настраиваем bxCAN: пины, скорость 1 Мбит/с, прерывания, а также фильтры.
 * После того как эта функция выполнится, bxCAN всё ещё будет находиться в режиме ИНИЦИАЛИЗАЦИИ */
void can_setup()
{
	// включаем тактирование CAN1 
	RCC->APB1ENR |= RCC_APB1ENR_CAN1EN; 
	// сбрасываем CAN remap
	AFIO->MAPR &= ~AFIO_MAPR_CAN_REMAP;
	// режим CAN remap 10: CANRx на PB8, CANTx на PB9
	AFIO->MAPR |= AFIO_MAPR_CAN_REMAP_REMAP2;
	// настраиваем PB8 на вход с pull-up (?)
	GPIOB->CRH &= ~(GPIO_CRH_CNF8 | GPIO_CRH_MODE8);
	GPIOB->CRH |= GPIO_CRH_CNF8_1;
	// настраиваем PB9 на выход в режиме alternate output push pull
	GPIOB->CRH &= ~(GPIO_CRH_CNF9 | GPIO_CRH_MODE9);
	GPIOB->CRH |= GPIO_CRH_MODE9_1 | GPIO_CRH_MODE9_0;
	GPIOB->CRH |= GPIO_CRH_CNF9_1;
	
	// включение прерываний для CAN - RX
	NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 4, 0));
	NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
	// NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 4, 0));
	// NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);

	// переход в режим инициализации
	CAN1->MCR |= CAN_MCR_INRQ;
	// ожидание установки режима инициализации
	while ((CAN1->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) {}
	// на всякий случай сбрасываем бит SLEEP чтобы выйти из режима сна
	CAN1->MCR &= ~CAN_MCR_SLEEP;
	// выключаем автоматическую переотправку сообщений
	CAN1->MCR |= CAN_MCR_NART;
	// выключение режима Time Triggered Communication Mode
	CAN1->MCR &= ~CAN_MCR_TTCM;
	// выключение режима Automatic bus-off management
	CAN1->MCR &= ~CAN_MCR_ABOM;
	// выключение режима Automatic wakeup mode
	CAN1->MCR &= ~CAN_MCR_AWUM;
	// FIFO не блокируется, если оно заполнено: новое сообщение будет 
	// перезаписывать предыдущее
	CAN1->MCR &= ~CAN_MCR_RFLM;
	// приоритет передачи сообщений определяется идентификаторами
	CAN1->MCR &= ~CAN_MCR_TXFP;

/* Настройка скорости CAN-шины на 1 Мбит/с 
    (1) На всякий случай очищаем биты прескейлера
    (2) Устанавливаем прескейлер для скорости 1 Мбит/с
    (3) Обнуляем биты Time Segment 1 и Time Segment 2
    (4) Устанавливаемы биты Time Segment 1 так, чтобы получилось число 110 = 6
    (5) Устанавливаем биты SJW в 0 (чтобы потом получить 1)
*/
	uint8_t prescaler = 0x03;
	CAN1->BTR &= ~CAN_BTR_BRP;                    // (1)
	CAN1->BTR |= prescaler;                       // (2)
	CAN1->BTR &= ~(CAN_BTR_TS1 | CAN_BTR_TS2);    // (3) 
	CAN1->BTR |= (CAN_BTR_TS1_1 | CAN_BTR_TS1_2); // (4)
	CAN1->BTR &= ~CAN_BTR_SJW;                    // (5)   

/* Настройка прерываний: включаем прерывание по получению сообщения в FIFO0,
пока непонятно, нужно ли использовать другой буфер (FIFO1).
 */
    CAN1->IER |= CAN_IER_FMPIE0;

/* Настройка фильтра - пока что фильтр настроен следующим образом - 
узел просто принимает все сообщения, которые есть на шине. На самом деле он должен
игнорировать свои сообщения, однако пока непонятно, как настроить фильтр
    (1) Входим в режим инициализации фильтра
    (2) Деактивируем фильтр под номером 0
	(3) Установка конфигурации - Single 32-bit scale configuration
	(4) Два 32 битных регистра фильтра в режиме маски
	(5) Устанавливаем регистр идентификатора в 0
	(6) Устанавливаем регистр маски в 0
	(7) Сообщения с фильтра 0 будут попадать в FIFO0
	(8) Активируем нулевой фильтр
	(9) Выходим из режима инициализации и активируем банки фильтров
 */ 
    static uint32_t CAN_filter_ID0 = 0x00;
    CAN1->FMR |= CAN_FMR_FINIT;                     // (1) 
	CAN1->FA1R &= ~(1 << CAN_filter_ID0);           // (2)
	CAN1->FS1R |= (1 << CAN_filter_ID0);            // (3)
	CAN1->FM1R &= ~(1 << CAN_filter_ID0);           // (4)
	CAN1->sFilterRegister[CAN_filter_ID0].FR1 = 0;  // (5)
	CAN1->sFilterRegister[CAN_filter_ID0].FR2 = 0;  // (6)
	CAN1->FFA1R &= ~(1 << CAN_filter_ID0);          // (7)
	CAN1->FA1R |= (1 << CAN_filter_ID0);            // (8)
	CAN1->FMR &= ~CAN_FMR_FINIT;                    // (9)
}

/* Выходим из режима инициализации и переходим в нормальный режим */
void can_start()
{
	CAN1->MCR &= ~CAN_MCR_INRQ;
	while ((CAN1->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) {}
}

/** Устанавливаем режим Test mode: silent mode, loop back mode или loop back 
 * silent mode. Функция должна быть вызвана, когда bxCAN находится в режиме 
 * инициализации
*@param mode режим, который нужно установить из num class CanTestMode 
*/
void can_set_test_mode(CanTestMode mode)
{
	CAN1->BTR &= ~(CAN_BTR_SILM | CAN_BTR_LBKM);
	switch (mode)
	{
	case CanTestMode::SilentMode:
	{
		CAN1->BTR |= CAN_BTR_SILM;
		break;
	}
	case CanTestMode::LoopBackMode:
	{
		CAN1->BTR |= CAN_BTR_LBKM;
		break;
	}
	case CanTestMode::LoopBackSilentMode:
	{
		CAN1->BTR |= CAN_BTR_SILM | CAN_BTR_LBKM;
		break;
	}
	default:
		break;
	}
}


uint8_t can_write(CAN_Message *msg)
{
/** Используем нулевой mailbox
 *  (1) Сброс регистра TIR  
 *  (2) Установка идентификатора в регистр TIR в зависимости от типа фрейма (стандартный или расширенный)
 *  (3) Будем отправлять только data фреймы, поэтому устанавливаем соответствующий 
 *  бит в регистре TIR
 *  (4) Записываем байты данных в регистры TDLR
 *  (5) Записываем байты данных в регистры TDHR
 *  (6) Сбрасываем биты DLC определяющие число байт данных
 *  (7) Устанавливаем количество отправляемых байт в DLC - 8
 *  (8) Запрос на отправку сообщения TXRQ = 1
*/
	CAN1->sTxMailBox[0].TIR = 0;                             // (1)
	if (msg->format == STANDARD_FORMAT)                      // (2)
	{
		CAN1->sTxMailBox[0].TIR |= static_cast<uint32_t>(msg->id << 21) | CAN_ID_STD;
	}
	else
	{
		CAN1->sTxMailBox[0].TIR |= static_cast<uint32_t>(msg->id << 3) | CAN_ID_EXT;
	}
	CAN1->sTxMailBox[0].TIR |= CAN_RTR_DATA;                 // (3)
	CAN1->sTxMailBox[0].TDLR = ((static_cast<uint32_t>(msg->data[3]) << 24U) |
	                            (static_cast<uint32_t>(msg->data[2]) << 16U) |
								(static_cast<uint32_t>(msg->data[1]) << 8U)  |
								 static_cast<uint32_t>(msg->data[0])); // (4)

	CAN1->sTxMailBox[0].TDHR = ((static_cast<uint32_t>(msg->data[7]) << 24U) |
	                            (static_cast<uint32_t>(msg->data[6]) << 16U) |
								(static_cast<uint32_t>(msg->data[5]) << 8U)  |
								 static_cast<uint32_t>(msg->data[4])); // (5)

	CAN1->sTxMailBox[0].TDTR &= ~CAN_TDT0R_DLC;              // (6)
	CAN1->sTxMailBox[0].TDTR |= (msg->len & CAN_TDT0R_DLC);  // (7)
	CAN1->sTxMailBox[0].TIR |= CAN_TI0R_TXRQ;                // (8)
	return 1;
}

uint8_t can_read(CAN_Message *msg)
{
	/** Используем нулевой mailbox
 *  (1) Получаем информацию об идентификаторе входящего сообщения 
 *  (2) Поскольку мы отправляем только data фреймы, то присваиваем типу 
 *      входящего сообщения DATA_FRAME
 *  (3) Читаем длину полезной нагрузки - число полученных байт (обычно 8)
 *  (4) Извлекаем из регистра RDLR младшие байты данных 
 *  (5) Извлекаем из регистра RDHR старшие байты данных 
 *  (6) Устанавливаем бит RF0M0 чтобы освободить FIFO0 (очищаем mailbox)
*/
    if ((CAN1->sFIFOMailBox[0].RIR & CAN_ID_EXT) == 0)                 // (1)
	{
		msg->format = STANDARD_FORMAT;
		msg->id = (CAN1->sFIFOMailBox[0].RIR >> 21) & 0x000007FFU; // 7FF = 11 битовых единиц
	}
	else
	{
		msg->format = EXTENDED_FORMAT;
		msg->id = (CAN1->sFIFOMailBox[0].RIR >> 3) & 0x1FFFFFFFU; // 1FFFFFFF = 29 битовых единиц
	}
	msg->type = DATA_FRAME;                                           // (2)  
	msg->len = CAN1->sFIFOMailBox[0].RDTR & CAN_RDT0R_DLC;            // (3)
	msg->data[0] = 0x000000FFU & (CAN1->sFIFOMailBox[0].RDLR);        // (4)
	msg->data[1] = 0x000000FFU & (CAN1->sFIFOMailBox[0].RDLR >> 8);
	msg->data[2] = 0x000000FFU & (CAN1->sFIFOMailBox[0].RDLR >> 16);
	msg->data[3] = 0x000000FFU & (CAN1->sFIFOMailBox[0].RDLR >> 24);

	msg->data[4] = 0x000000FFU & (CAN1->sFIFOMailBox[0].RDHR);        // (5)
	msg->data[5] = 0x000000FFU & (CAN1->sFIFOMailBox[0].RDHR >> 8);
	msg->data[6] = 0x000000FFU & (CAN1->sFIFOMailBox[0].RDHR >> 16);
	msg->data[7] = 0x000000FFU & (CAN1->sFIFOMailBox[0].RDHR >> 24);
	
	CAN1->RF0R |= CAN_RF0R_RFOM0;                                     // (6)
	return 1;
}

CAN_Message can_output_msg, can_input_msg;
CAN_Message msg1();

CanModrobTransport can_transport(true);

int main() {

	board::system_config();
	board::sys_tick_init();
	board::gpio_setup();
	usart2::usart2_init();

    GREEN_LED_OFF;
	TESTPIN_OFF;

	can_setup();
	usart2::usart_send_string("CAN controller inited\n");
	// can_set_test_mode(CanTestMode::LoopBackMode);
	// usart2::usart_send_string("Set loop back mode for CAN\n");
	can_start();
	usart2::usart_send_string("CAN controller started\n");


	char data[] = "12345678";
	can_output_msg.id = 90;
	for (int i = 0; i < 8; i++) can_output_msg.data[i] = data[i];
	can_output_msg.len = 8;
	can_output_msg.format = EXTENDED_FORMAT;
	can_output_msg.type = DATA_FRAME;

	char debug_str[9] = {0};
	// can_transport.rx_buffer.emplace_back(msg1);

	while(1) 
	{
		board::delay_ms(100);
		can_write(&can_output_msg);
		// if (can_rx_ready)
		// {
		// 	can_rx_ready = 0;
		// }
		// usart2::char_to_str(can_input_msg.data, debug_str);
		// usart2::usart_send_string(debug_str);
		// usart2::usart_send_string("\n");
	}

	return 0;
}

/* Нужно добавлять для обработчиков прерываний (пока непонятно для всех
или для только SysTick) обёртку, которая позволяет воспринимать 
участок кода как код языка С (НЕ С++). Без этого функции обработчиков
прерываний не хотят работать  */
extern "C" 
{
    void SysTick_Handler(void) 
    {
    	board::systick_delay_handler();
    }
}

// обработчик прерывания от памяти к периферии (USART2-TX)
extern "C" 
{
	void DMA1_Channel7_IRQHandler(void)
	{
		TESTPIN_ON;
		usart2::transfer_handler_irq();
		TESTPIN_OFF;
	}
}



extern "C"
{
	/* Обработка прерывания по переносу данных из сдвигового регистра в USART_DR при приёме данных по RX */
	void USART2_IRQHandler(void) 
	{
		usart2::receive_handler_irq();
	}
}

extern "C"
{
	void USB_LP_CAN1_RX0_IRQHandler(void)
	{
		if (CAN1->RF0R & CAN_RF0R_FMP0) // FMP0 > 0? 
		{
			// есть как минимум одно сообщение в FIFO0
			can_read(&can_input_msg);
			// can_transport.rx_buffer.emplace_back(can_input_msg);
			can_rx_ready = 1;
		}
	}
}