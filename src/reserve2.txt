Вариант агрегатора, написанный с помощью uthash, работало добавление, поиск, удаление элементов.
Также работала подписка. Основная проблема - структура, используемая как элемент хеш-таблицы
занимает очень большой объём памяти - UT_hash_handle занимает 32 байта на 32-х разрядных машинах.
Было решено написать новую версию с использованием другой библиотеки:
khash, которая по заявлению автора работает быстрее и занимает меньше памяти.

#ifndef MODROB_AGGREGATOR_HPP
#define MODROB_AGGREGATOR_HPP

#include "modrob.hpp"
#include "../uthash.h"

using namespace modrob;

struct VariableInfo
{
    int hash_id;
    uint16_t moduleID;
    uint8_t  variableID{0};
    uint8_t  typeID;
    uint16_t hertz{0};
    float value;
    // uint16_t subscribeFromModuleID{0};
    // uint8_t  subscribeFromVariableID{0};
    bool isChanged = false;
    bool isLogged = false;
    VariableInfo(uint16_t _modID, uint8_t _varID, uint16_t _hertz): 
                 moduleID(_modID), variableID(_varID), hertz(_hertz) {}
    UT_hash_handle hh;
};




class Aggregator : public Node
{
    // переменная, используемая для ведения лога по запросу
    uint16_t aggregatorID;
    uint8_t  aggVariableID{0};
    float    value_log;
    VariableInfo *publishers = nullptr;
    

    ModrobTransport* lowerTransport = &defaultTransport;

public:

    Aggregator(uint16_t address, uint8_t typeId): Node(address, typeId) {}

    void run(long time_us)
    {
        handleIncomingModRobMessages();
    }

/** Добавляет новую публикуемую переменную в хеш-таблицу публикующихся переменных
 * @param pub_modID идентификатор модуля, который публикует переменную
 * @param pub_varID идентификатор публикуемой переменной
 * @param pub_hertz частота публикуемой переменной
 */
    void add_new_publisher(uint16_t pub_modID, uint8_t pub_varID, uint16_t pub_hertz)
    {
        VariableInfo *var = new VariableInfo(pub_modID, pub_varID, pub_hertz);
        int id = 0;
        compose_hashID(id, pub_modID, pub_varID);
        var->hash_id = id;
        var->moduleID = pub_modID;
        var->variableID = pub_varID;
        var->hertz = pub_hertz;
        HASH_ADD_INT(publishers, hash_id, var);
    }

/** Поиск элемента хеш-таблицы по идентификатору
 * @param modID_find идентификатор модуля, который мы ищем
 * @param varID_find идентификатор переменной, которую мы ищем
 * @return указатель на структуру переменной
 */
    VariableInfo *find_publisher(uint16_t modID_find, uint8_t varID_find)
    {
        int id_to_find;
        VariableInfo *v;
        compose_hashID(id_to_find, modID_find, varID_find);
        HASH_FIND_INT(publishers, &id_to_find, v);
        return v;
    }

/** Удаление элемента хеш-таблицы по ID модуля и ID переменной 
 * @param modID_to_del идентификатор модуля, который мы хотим удалить из таблицы
 * @param varID_to_del идентификатор переменной, которую мы хотим удалить из таблицы
 */
    void remove_publisher(uint16_t modID_to_del, uint8_t varID_to_del)
    {
        VariableInfo *publisher_to_delete = find_publisher(modID_to_del, varID_to_del);
        HASH_DEL(publishers, publisher_to_delete);
    }

    void set_logging(uint16_t modID_to_log, uint8_t varID_to_log)
    {
        VariableInfo* publisher_to_log = find_publisher(modID_to_log, varID_to_log);
        publisher_to_log->isLogged = true;
    }

    void reset_logging(uint16_t modID_to_log, uint8_t varID_to_log)
    {
        VariableInfo* publisher_to_log = find_publisher(modID_to_log, varID_to_log);
        publisher_to_log->isLogged = false;
    }

    int get_publishers_num()
    {
        return HASH_COUNT(publishers);
    }

private:

    void handleIncomingModRobMessages()
    {
        bool isReceived = Aggregator::lowerTransport->receive(incomingMsg) || isReceivedOutside;
        if(not isReceived) return;
        if((incomingMsg.messageType == MessageType::Publication) && (HASH_COUNT(publishers) != 0))
        {
            VariableInfo* var_to_update = find_publisher(incomingMsg.moduleID, incomingMsg.variableID); 
            if ((var_to_update == nullptr) || (not var_to_update->isLogged)) {
                return;
            }
            var_to_update->value = incomingMsg.getValue();
            var_to_update->isChanged = true;
        }
        isReceivedOutside = false;
    }

    void log_all_variables(long time)
    {
        VariableInfo* var_to_send;
    }


    void compose_hashID(int& id, uint16_t ModuleID, uint8_t VariableID)
    {
        id = ((ModuleID & 0xFFFFU) << 8U) | (VariableID & 0xFF);
    }
    
    void decompose_hashID(int& id, uint16_t& ModuleID, uint8_t& VariableID)
    {
        ModuleID =  (id & 0xFFFF00U) >> 8U;
        VariableID = id & 0x0000FFU;
    }


};






#endif